(defun bellman (v e graph1 graph2 graph3 src dest)

  (setq distances (make-array v :initial-element 9999))

  (setf (aref distances src) 0)

  (dotimes (i (- v 1))
    (dotimes (j e)
      (IF (> (aref distances (aref graph2 j)) (+ (aref distances (aref graph1 j)) (aref graph3 j)))
       (
          setf (aref distances ( aref graph2 j)) (+ (aref distances (aref graph1 j)) (aref graph3 j))
       )
      )
    )
  )

  (setq result (aref distances dest)) 
)

(DEFUN nodeMapping (node)
	(case node
		(0 'SUBANSIRI)
		(1 'I_B)
		(2 'I_C)
		(3 'LOHIT)
		((4 5) 'KAPILI_DIBANG)
		((6 7) 'DIHING_BRAHMAPUTRA)
		(16 'I_Q)
		(8 'I_I)
		(9 'I_J)
		(10 'UMIAM)
		(11 'I_L)
		((12 13) 'BARAK_KAMENG)
		(14 'I_O)
		(15 'MANAS)))

(DEFUN generateGraph (filename)
	(setq from (make-array 27 :fill-pointer 0))
	(setq to (make-array 27 :fill-pointer 0))
	(setq weight (make-array 27 :fill-pointer 0))
	(let ((in (open filename :if-does-not-exist nil)))
	   (when in
	   	  ;;for A->B
	      (if (= 1 (parse-integer (read-line in nil)))
	      	(progn (vector-push '0 from)
	      	 (vector-push '1 to)
	      	 (vector-push '250 weight))
	      	(progn (vector-push '1 from)
	      	 (vector-push '0 to)
	      	 (vector-push '250 weight))
	      	)
	      ;;for B->C
	      (if (= 1 (parse-integer (read-line in nil)))
	      	(progn (vector-push '1 from)
	      	 (vector-push '2 to)
	      	 (vector-push '210 weight))
	      	(progn (vector-push '2 from)
	      	 (vector-push '1 to)
	      	 (vector-push '210 weight))
	      	)
	      ;;for C->D
	      (if (= 1 (parse-integer (read-line in nil)))
	      	(progn (vector-push '2 from)
	      	 (vector-push '3 to)
	      	 (vector-push '150 weight))
	      	(progn (vector-push '3 from)
	      	 (vector-push '2 to)
	      	 (vector-push '150 weight))
	      	)
	      ;;for C->EF
	      (if (= 1 (parse-integer (read-line in nil)))
	      	(progn (vector-push '2 from)
	      	 (vector-push '4 to)
	      	 (vector-push '260 weight)
	      	 (vector-push '2 from)
	      	 (vector-push '5 to)
	      	 (vector-push '260 weight))
	      	(progn (vector-push '4 from)
	      	 (vector-push '2 to)
	      	 (vector-push '260 weight)
	      	 (vector-push '5 from)
	      	 (vector-push '2 to)
	      	 (vector-push '260 weight))
	      	)
	      ;;for EF->GH
	      (if (= 1 (parse-integer (read-line in nil)))
	      	(progn (vector-push '4 from)
	      	 (vector-push '6 to)
	      	 (vector-push '350 weight)
	      	 (vector-push '4 from)
	      	 (vector-push '7 to)
	      	 (vector-push '350 weight)
	      	 (vector-push '5 from)
	      	 (vector-push '6 to)
	      	 (vector-push '350 weight)
	      	 (vector-push '5 from)
	      	 (vector-push '7 to)
	      	 (vector-push '350 weight))
	      	(progn (vector-push '6 from)
	      	 (vector-push '4 to)
	      	 (vector-push '350 weight)
	      	 (vector-push '7 from)
	      	 (vector-push '4 to)
	      	 (vector-push '350 weight)
	      	 (vector-push '6 from)
	      	 (vector-push '5 to)
	      	 (vector-push '350 weight)
	      	 (vector-push '7 from)
	      	 (vector-push '5 to)
	      	 (vector-push '350 weight))
	      	)
	      ;;for GH->Q
	      (if (= 1 (parse-integer (read-line in nil)))
	      	(progn (vector-push '6 from)
	      	 (vector-push '16 to)
	      	 (vector-push '65 weight)
	      	 (vector-push '7 from)
	      	 (vector-push '16 to)
	      	 (vector-push '65 weight))
	      	(progn (vector-push '16 from)
	      	 (vector-push '6 to)
	      	 (vector-push '65 weight)
	      	 (vector-push '16 from)
	      	 (vector-push '7 to)
	      	 (vector-push '65 weight))
	      	)
	      ;;for Q->I
	      (if (= 1 (parse-integer (read-line in nil)))
	      	(progn (vector-push '16 from)
	      	 (vector-push '8 to)
	      	 (vector-push '140 weight))
	      	(progn (vector-push '8 from)
	      	 (vector-push '16 to)
	      	 (vector-push '140 weight))
	      	)
	      ;;for I->P
	      (if (= 1 (parse-integer (read-line in nil)))
	      	(progn (vector-push '8 from)
	      	 (vector-push '15 to)
	      	 (vector-push '57 weight))
	      	(progn (vector-push '15 from)
	      	 (vector-push '8 to)
	      	 (vector-push '57 weight))
	      	)
	      ;;for P->O
	      (if (= 1 (parse-integer (read-line in nil)))
	      	(progn (vector-push '15 from)
	      	 (vector-push '14 to)
	      	 (vector-push '173 weight))
	      	(progn (vector-push '14 from)
	      	 (vector-push '15 to)
	      	 (vector-push '173 weight))
	      	)
	      ;;for I->J
	      (if (= 1 (parse-integer (read-line in nil)))
	      	(progn (vector-push '8 from)
	      	 (vector-push '9 to)
	      	 (vector-push '73 weight))
	      	(progn (vector-push '9 from)
	      	 (vector-push '8 to)
	      	 (vector-push '73 weight))
	      	)
	      ;;for J->K
	      (if (= 1 (parse-integer (read-line in nil)))
	      	(progn (vector-push '9 from)
	      	 (vector-push '10 to)
	      	 (vector-push '140 weight))
	      	(progn (vector-push '10 from)
	      	 (vector-push '9 to)
	      	 (vector-push '140 weight))
	      	)
	      ;;for J->L
	      (if (= 1 (parse-integer (read-line in nil)))
	      	(progn (vector-push '9 from)
	      	 (vector-push '11 to)
	      	 (vector-push '110 weight))
	      	(progn (vector-push '11 from)
	      	 (vector-push '9 to)
	      	 (vector-push '110 weight))
	      	)
	      ;;for L->MN
	      (if (= 1 (parse-integer (read-line in nil)))
	      	(progn (vector-push '11 from)
	      	 (vector-push '12 to)
	      	 (vector-push '95 weight)
	      	 (vector-push '11 from)
	      	 (vector-push '13 to)
	      	 (vector-push '95 weight))
	      	(progn (vector-push '12 from)
	      	 (vector-push '11 to)
	      	 (vector-push '95 weight)
	      	 (vector-push '13 from)
	      	 (vector-push '11 to)
	      	 (vector-push '95 weight))
	      	)
	      ;;for L->O
	      (if (= 1 (parse-integer (read-line in nil)))
	      	(progn (vector-push '11 from)
	      	 (vector-push '14 to)
	      	 (vector-push '180 weight))
	      	(progn (vector-push '14 from)
	      	 (vector-push '11 to)
	      	 (vector-push '180 weight))
	      	)
	      ;;for B->O
	      (if (= 1 (parse-integer (read-line in nil)))
	      	(progn (vector-push '1 from)
	      	 (vector-push '14 to)
	      	 (vector-push '500 weight))
	      	(progn (vector-push '14 from)
	      	 (vector-push '1 to)
	      	 (vector-push '500 weight))
	      	)
	      ;;FE
	      (vector-push '5 from)
      	  (vector-push '4 to)
      	  (vector-push '2 weight)
      	  (vector-push '4 from)
      	  (vector-push '5 to)
      	  (vector-push '2 weight)
      	  ;;GH
      	  (vector-push '6 from)
      	  (vector-push '7 to)
      	  (vector-push '2 weight)
      	  (vector-push '7 from)
      	  (vector-push '6 to)
      	  (vector-push '2 weight)
      	  ;;MN
      	  (vector-push '12 from)
      	  (vector-push '13 to)
      	  (vector-push '2 weight)
      	  (vector-push '13 from)
      	  (vector-push '12 to)
      	  (vector-push '2 weight)
	      (close in)
	      (bellman 17 27 from to weight 1 0)
	   )))